pipeline {
  agent none
  options {
    disableConcurrentBuilds()
  }
  stages {
  stage('checks') {
    agent {
      docker {
        image 'alpine:3.9'
        label 'linux'
      }
    }
    steps {
      sh label: "Find files with trailing whitespace", script: '! grep -n "[ \t]$" *.tex chapters/*.tex'
    }
  }
  stage('verify grammar') {
    agent {
      docker {
        image 'modelicaspec/antlr:20190521'
        label 'linux'
      }
    }
    environment {
      CLASSPATH = '/usr/share/java/antlr4.jar:/usr/share/java/antlr3.jar:.'
    }
    steps {
      sh 'echo $CLASSPATH'
      sh 'cd grammar && ./build.sh -tree'
      sh 'cd grammar && java Main /usr/lib/MODELICAPATH'
    }
  }
  stage('build') {
    agent {
      docker {
        image 'modelicaspec/latexml:20191011'
        label 'linux'
        alwaysPull true
      }
    }
    steps {
      sh 'make all'
      sh 'tar czf MLS.tar.gz *.html *.css media css/'
      archiveArtifacts artifacts: 'MLS.tar.gz', fingerprint: true
      archiveArtifacts artifacts: 'MLS.pdf', fingerprint: true
      stash name: 'MLS', includes: '*.html,*.css,MLS.pdf,media/**,css/**,MLS.tar.gz'
    }
  }
  stage('upload') {
    when {
      allOf {
        not {
          changeRequest()
        }
        anyOf {
          buildingTag()
          anyOf {
            branch 'master'
          }
        }
      }
      beforeAgent true
    }
    agent {
      label 'linux'
    }
    steps {
      unstash name: 'MLS'
      sh "test ! -z ${env.GIT_BRANCH}"
      sshPublisher(publishers: [sshPublisherDesc(configName: 'ModelicaSpecification', transfers: [sshTransfer(remoteDirectory: "${env.GIT_BRANCH}", sourceFiles: '*.html,*.css,MLS.pdf,media/**,css/**')])])
    }
  }
  stage('index') {
    agent {
      docker {
        image 'modelicaspec/markdown:20190307'
        label 'linux'
        alwaysPull true
      }
    }
    when {
      allOf {
        not {
          changeRequest()
        }
        branch 'master'
      }
      beforeAgent true
    }
    steps {
      sh 'python3 .CI/index.py'
      sshPublisher(publishers: [sshPublisherDesc(configName: 'ModelicaSpecification', transfers: [sshTransfer(sourceFiles: 'index.html')])])
    }
  }
  }
}
